datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]

  @@index([email, clerkId])
  @@map("users")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  price       Float    @db.Double
  salePrice   Float?   @db.Double
  imageUrls   String[]
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  category    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@index([slug, isActive])
  @@index([category, isFeatured])
  @@map("products")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  total         Float       @db.Double
  customerName  String
  customerEmail String
  customerPhone String?
  shippingAddress Json      // Embedded document for address
  cartItems     Json        // Embedded array of cart items
  paymentMethod String?
  paymentStatus String?     @default("pending")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId String   @db.ObjectId
  user   User     @relation(fields: [userId], references: [id])
  items  OrderItem[] // Embedded in MongoDB

  @@index([userId, createdAt])
  @@index([orderNumber, status])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float    @db.Double
  createdAt DateTime @default(now())

  // Product snapshot at time of order
  productName String
  productSlug String
  productImage String?

  // Relations
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}